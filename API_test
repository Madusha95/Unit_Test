import uuid
import requests

BASE_URL = "https://todo.pixegami.io"

# --- Helper Functions ---
def new_task_payload():
    unique_user_id = f"test_user_{uuid.uuid4().hex}"
    content = f"test_content_{uuid.uuid4().hex}"
    return {
        "user_id": unique_user_id,
        "content": content,
        "is_done": False
    }

def create_task(payload):
    return requests.put(f"{BASE_URL}/create-task", json=payload)

def get_task(task_id):
    return requests.get(f"{BASE_URL}/get-task/{task_id}")

def update_task(payload):
    return requests.put(f"{BASE_URL}/update-task", json=payload)

def list_tasks(user_id):
    return requests.get(f"{BASE_URL}/list-tasks/{user_id}")

def delete_task(task_id):
    return requests.delete(f"{BASE_URL}/delete-task/{task_id}")

# --- Test Cases ---
def test_can_create_task():
    payload = new_task_payload()
    create_response = create_task(payload)
    assert create_response.status_code == 200

    task_id = create_response.json()["task"]["task_id"]
    get_response = get_task(task_id)
    assert get_response.status_code == 200
    task_data = get_response.json()
    assert task_data["content"] == payload["content"]
    assert task_data["user_id"] == payload["user_id"]

def test_can_update_task():
    payload = new_task_payload()
    create_response = create_task(payload)
    task_id = create_response.json()["task"]["task_id"]

    updated_payload = {
        "user_id": payload["user_id"],
        "task_id": task_id,
        "content": f"updated_{uuid.uuid4().hex}",
        "is_done": True
    }
    update_response = update_task(updated_payload)
    assert update_response.status_code == 200

    get_response = get_task(task_id)
    task_data = get_response.json()
    assert task_data["content"] == updated_payload["content"]
    assert task_data["is_done"] is True

def test_can_list_tasks():
    payload = new_task_payload()
    user_id = payload["user_id"]

    for _ in range(3):
        create_response = create_task(payload)
        assert create_response.status_code == 200

    list_response = list_tasks(user_id)
    assert list_response.status_code == 200
    tasks = list_response.json().get("tasks", [])
    assert len(tasks) == 3

def test_can_delete_task():
    payload = new_task_payload()
    create_response = create_task(payload)
    task_id = create_response.json()["task"]["task_id"]

    delete_response = delete_task(task_id)
    assert delete_response.status_code == 200

    get_response = get_task(task_id)
    assert get_response.status_code == 404
